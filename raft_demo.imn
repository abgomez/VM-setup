node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {394.0 284.0}
    labelcoords {394.0 316.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
}

node n2 {
    type router
    model PC
    network-config {
	hostname genesis
	!
	interface eth0
	 ip address 10.0.0.20/24
	 ipv6 address 2001:0::20/64
	!
    }
    canvas c1
    iconcoords {195.0 425.0}
    labelcoords {195.0 457.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('sh /home/lab/Desktop/lab/raft_genesis.sh', )
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n3 {
    type router
    model PC
    network-config {
	hostname client1
	!
	interface eth0
	 ip address 10.0.1.20/24
	 ipv6 address 2001:1::20/64
	!
    }
    canvas c1
    iconcoords {310.0 102.0}
    labelcoords {310.0 134.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:10.0.1.20:1003 --endpoint tcp://10.0.1.20:1003 --peering static --peers tcp://10.0.0.20:1003&
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp -v --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
}

link l1 {
    nodes {n2 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

