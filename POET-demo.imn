node n2 {
    type router
    model PC
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.4.20/24
	 ipv6 address 2001:4::20/64
	!
    }
    canvas c1
    iconcoords {180.0 78.0}
    labelcoords {180.0 110.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.3.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n3 {
    type router
    model PC
    network-config {
	hostname genesis
	!
	interface eth0
	 ipv6 address 2001:3::20/64
	 ip address 10.0.3.20/24
	!
    }
    canvas c1
    iconcoords {180.0 251.0}
    labelcoords {180.0 283.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('genesis.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-genesis.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:genesis.sh
	custom-command genesis.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#genesis
	sawset genesis -k keys/validator.priv -o config-genesis.batch
	
	sawset proposal create -k keys/validator.priv -o config.batch \
	sawtooth.consensus.algorithm=poet \
	sawtooth.poet.report_public_key_pem="$(cat /etc/sawtooth/simulator_rk_pub.pem)" \
	sawtooth.poet.valid_enclave_measurements=$(poet enclave measurement) \
	sawtooth.poet.valid_enclave_basenames=$(poet enclave basename)
	
	poet registration create -k keys/validator.priv -o poet.batch
	
	sawset proposal create -k keys/validator.priv \
	-o poet-settings.batch \
	sawtooth.poet.target_wait_time=5 \
	sawtooth.poet.initial_wait_time=25 \
	sawtooth.publisher.max_batches_per_block=100
	
	sawadm genesis config-genesis.batch config.batch poet.batch poet-settings.batch
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peering dynamic &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n4 {
    type router
    model PC
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.5.20/24
	 ipv6 address 2001:5::20/64
	!
    }
    canvas c1
    iconcoords {371.0 66.0}
    labelcoords {371.0 98.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.3.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n5 {
    type router
    model PC
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.6.20/24
	 ipv6 address 2001:6::20/64
	!
    }
    canvas c1
    iconcoords {527.0 95.0}
    labelcoords {527.0 127.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.3.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.7.20/24
	 ipv6 address 2001:7::20/64
	!
    }
    canvas c1
    iconcoords {634.0 172.0}
    labelcoords {634.0 204.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n1}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.8.20/24
	 ipv6 address 2001:8::20/64
	!
    }
    canvas c1
    iconcoords {756.0 288.0}
    labelcoords {756.0 320.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n9 {
    type router
    model PC
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.9.20/24
	 ipv6 address 2001:9::20/64
	!
    }
    canvas c1
    iconcoords {837.0 365.0}
    labelcoords {837.0 397.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n10 {
    type router
    model PC
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.10.20/24
	 ipv6 address 2001:10::20/64
	!
    }
    canvas c1
    iconcoords {839.0 442.0}
    labelcoords {839.0 474.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n11 {
    type router
    model PC
    network-config {
	hostname n11
	!
	interface eth0
	 ip address 10.0.11.20/24
	 ipv6 address 2001:11::20/64
	!
    }
    canvas c1
    iconcoords {718.0 478.0}
    labelcoords {718.0 510.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n12 {
    type router
    model PC
    network-config {
	hostname n12
	!
	interface eth0
	 ip address 10.0.12.20/24
	 ipv6 address 2001:12::20/64
	!
    }
    canvas c1
    iconcoords {582.0 501.0}
    labelcoords {582.0 533.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n13 {
    type router
    model router
    network-config {
	hostname n13
	!
	interface eth1
	 ip address 10.0.2.1/24
	 ipv6 address 2001:2::1/64
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
	interface eth2
	 ip address 10.0.13.1/24
	 ipv6 address 2001:13::1/128
	!
    }
    canvas c1
    iconcoords {411.0 384.0}
    labelcoords {411.0 416.0}
    interface-peer {eth2 n16}
    interface-peer {eth0 n1}
    interface-peer {eth1 n7}
}

node n14 {
    type router
    model PC
    network-config {
	hostname n14
	!
	interface eth0
	 ip address 10.0.13.20/24
	 ipv6 address 2001:13::20/128
	!
    }
    canvas c1
    iconcoords {267.0 346.0}
    labelcoords {267.0 378.0}
    interface-peer {eth0 n16}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.3.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
}

node n16 {
    type wlan
    network-config {
	hostname wlan16
	!
	interface wireless
	 ipv6 address 2001:13::0/128
	 ip address 10.0.13.0/24
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {134.0 578.0}
    labelcoords {134.0 610.0}
    interface-peer {e0 n13}
    interface-peer {e1 n14}
    interface-peer {e3 n17}
    interface-peer {e2 n15}
    interface-peer {e4 n18}
}

node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth6
	 ip address 10.0.7.1/24
	 ipv6 address 2001:7::1/64
	!
	interface eth5
	 ip address 10.0.6.1/24
	 ipv6 address 2001:6::1/64
	!
	interface eth4
	 ip address 10.0.5.1/24
	 ipv6 address 2001:5::1/64
	!
	interface eth3
	 ip address 10.0.4.1/24
	 ipv6 address 2001:4::1/64
	!
	interface eth2
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {358.0 208.0}
    labelcoords {358.0 240.0}
    interface-peer {eth0 n7}
    interface-peer {eth1 n13}
    interface-peer {eth2 n3}
    interface-peer {eth3 n2}
    interface-peer {eth4 n4}
    interface-peer {eth5 n5}
    interface-peer {eth6 n6}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth6
	 ip address 10.0.12.1/24
	 ipv6 address 2001:12::1/64
	!
	interface eth5
	 ip address 10.0.11.1/24
	 ipv6 address 2001:11::1/64
	!
	interface eth4
	 ip address 10.0.10.1/24
	 ipv6 address 2001:10::1/64
	!
	interface eth3
	 ip address 10.0.9.1/24
	 ipv6 address 2001:9::1/64
	!
	interface eth2
	 ip address 10.0.8.1/24
	 ipv6 address 2001:8::1/64
	!
	interface eth1
	 ip address 10.0.2.2/24
	 ipv6 address 2001:2::2/64
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001:0::2/64
	!
    }
    canvas c1
    iconcoords {641.0 379.0}
    labelcoords {641.0 411.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n13}
    interface-peer {eth2 n8}
    interface-peer {eth3 n9}
    interface-peer {eth4 n10}
    interface-peer {eth5 n11}
    interface-peer {eth6 n12}
}

node n17 {
    type router
    model PC
    network-config {
	hostname n17
	!
	interface eth0
	 ip address 10.0.13.22/24
	 ipv6 address 2001:13::22/128
	!
    }
    canvas c1
    iconcoords {241.0 453.0}
    labelcoords {241.0 485.0}
    interface-peer {eth0 n16}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
}

node n15 {
    type router
    model PC
    network-config {
	hostname n15
	!
	interface eth0
	 ip address 10.0.13.21/24
	 ipv6 address 2001:13::21/128
	!
    }
    canvas c1
    iconcoords {410.0 482.0}
    labelcoords {410.0 514.0}
    interface-peer {eth0 n16}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
}

node n18 {
    type router
    model PC
    network-config {
	hostname n18
	!
	interface eth0
	 ip address 10.0.13.23/24
	 ipv6 address 2001:13::23/128
	!
    }
    canvas c1
    iconcoords {309.0 520.0}
    labelcoords {309.0 552.0}
    interface-peer {eth0 n16}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client.sh', )
	cmdup=('sh /home/manhattan/Desktop/demo/POET-client.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client.sh
	custom-command client.sh
	config {
	#path setup
	mkdir data
	mkdir logs
	mkdir keys
	
	export SAWTOOTH_HOME=`pwd`
	
	#get ip address
	IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
	
	
	#keys
	sawadm keygen
	sawtooth keygen
	
	#validator
	sawtooth-validator -vv --bind component:tcp://127.0.0.1:1001 --bind network:tcp://$IP:1003 --endpoint tcp://$IP:1003 --peers tcp://10.0.0.20:1003 &
	
	#rest api
	sawtooth-rest-api -v --bind 127.0.0.1:1002 --connect 127.0.0.1:1001 &
	
	#processors
	settings-tp -v --connect tcp://127.0.0.1:1001 &
	poet-validator-registry-tp --connect tcp://127.0.0.1:1001 &
	intkey-tp-python -v --connect tcp://127.0.0.1:1001 &
	}
    }
    services {DefaultRoute UserDefined}
}

link l14 {
    nodes {n16 n13}
}

link l15 {
    nodes {n16 n14}
}

link l1 {
    nodes {n1 n7}
    bandwidth 0
}

link l2 {
    nodes {n1 n13}
    bandwidth 0
}

link l3 {
    nodes {n13 n7}
    bandwidth 0
}

link l4 {
    nodes {n1 n3}
    bandwidth 0
}

link l5 {
    nodes {n1 n2}
    bandwidth 0
}

link l6 {
    nodes {n1 n4}
    bandwidth 0
}

link l7 {
    nodes {n1 n5}
    bandwidth 0
}

link l8 {
    nodes {n1 n6}
    bandwidth 0
}

link l9 {
    nodes {n7 n8}
    bandwidth 0
}

link l10 {
    nodes {n7 n9}
    bandwidth 0
}

link l11 {
    nodes {n7 n10}
    bandwidth 0
}

link l12 {
    nodes {n7 n11}
    bandwidth 0
}

link l13 {
    nodes {n7 n12}
    bandwidth 0
}

link l17 {
    nodes {n16 n17}
}

link l16 {
    nodes {n16 n15}
}

link l18 {
    nodes {n16 n18}
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

